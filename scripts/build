#!/usr/bin/env bash

set -exuo pipefail

# Navegar até o diretório raiz do projeto
cd "$(dirname "$0")/.."

# Verificar versão
node scripts/utils/check-version.cjs

# Preparar o diretório de distribuição
rm -rf dist
mkdir -p dist

# Copiar arquivos necessários para a distribuição
cp -rp src README.md dist
rm -f dist/src/_shims/*-deno.ts dist/src/_shims/auto/*-deno.ts

# Copiar arquivos opcionais se existirem
for file in LICENSE CHANGELOG.md; do
  [ -e "$file" ] && cp "$file" dist
done

# Copiar binário se existir
if [ -e "bin/cli" ]; then
  mkdir -p dist/bin
  cp -p "bin/cli" dist/bin/
fi

# Modificar package.json e gerar dist
node scripts/utils/make-dist-package-json.cjs > dist/package.json

# Compilar arquivos .js/.mjs/.d.ts
npm exec tsc-multi

# Copiar arquivos .js/.mjs/.d.ts gerados manualmente
find src/_shims -name '*.{d.ts,js,mjs,md}' -exec cp {} dist/_shims/ \;
find src/_shims/auto -name '*.{d.ts,js,mjs}' -exec cp {} dist/_shims/auto/ \;

# Ajustar exports no index.js
node scripts/utils/fix-index-exports.cjs

# Corrigir resolução de módulo para TypeScript
cp dist/index.d.ts dist/index.d.mts

# Copiar tsconfig para a pasta dist/src
cp tsconfig.dist-src.json dist/src/tsconfig.json

# Pós-processamento dos arquivos
node scripts/utils/postprocess-files.cjs

# Testar se o pacote gerado está funcionando
(cd dist && node -e 'require("openai")')
(cd dist && node -e 'import("openai")' --input-type=module)

# Construir para Deno, se aplicável
if [ "${OPENAI_DISABLE_DENO_BUILD:-0}" != "1" ] && command -v deno &> /dev/null && [ -e ./scripts/build-deno ]; then
  ./scripts/build-deno
fi
